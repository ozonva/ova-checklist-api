// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChecklistStorageClient is the client API for ChecklistStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChecklistStorageClient interface {
	CreateChecklist(ctx context.Context, in *CreateChecklistRequest, opts ...grpc.CallOption) (*CreateChecklistResponse, error)
	DescribeChecklist(ctx context.Context, in *DescribeChecklistRequest, opts ...grpc.CallOption) (*DescribeChecklistResponse, error)
	ListChecklists(ctx context.Context, in *ListChecklistsRequest, opts ...grpc.CallOption) (*ListChecklistsResponse, error)
	RemoveChecklist(ctx context.Context, in *RemoveChecklistRequest, opts ...grpc.CallOption) (*RemoveChecklistResponse, error)
}

type checklistStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewChecklistStorageClient(cc grpc.ClientConnInterface) ChecklistStorageClient {
	return &checklistStorageClient{cc}
}

func (c *checklistStorageClient) CreateChecklist(ctx context.Context, in *CreateChecklistRequest, opts ...grpc.CallOption) (*CreateChecklistResponse, error) {
	out := new(CreateChecklistResponse)
	err := c.cc.Invoke(ctx, "/service.ChecklistStorage/CreateChecklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistStorageClient) DescribeChecklist(ctx context.Context, in *DescribeChecklistRequest, opts ...grpc.CallOption) (*DescribeChecklistResponse, error) {
	out := new(DescribeChecklistResponse)
	err := c.cc.Invoke(ctx, "/service.ChecklistStorage/DescribeChecklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistStorageClient) ListChecklists(ctx context.Context, in *ListChecklistsRequest, opts ...grpc.CallOption) (*ListChecklistsResponse, error) {
	out := new(ListChecklistsResponse)
	err := c.cc.Invoke(ctx, "/service.ChecklistStorage/ListChecklists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistStorageClient) RemoveChecklist(ctx context.Context, in *RemoveChecklistRequest, opts ...grpc.CallOption) (*RemoveChecklistResponse, error) {
	out := new(RemoveChecklistResponse)
	err := c.cc.Invoke(ctx, "/service.ChecklistStorage/RemoveChecklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChecklistStorageServer is the server API for ChecklistStorage service.
// All implementations must embed UnimplementedChecklistStorageServer
// for forward compatibility
type ChecklistStorageServer interface {
	CreateChecklist(context.Context, *CreateChecklistRequest) (*CreateChecklistResponse, error)
	DescribeChecklist(context.Context, *DescribeChecklistRequest) (*DescribeChecklistResponse, error)
	ListChecklists(context.Context, *ListChecklistsRequest) (*ListChecklistsResponse, error)
	RemoveChecklist(context.Context, *RemoveChecklistRequest) (*RemoveChecklistResponse, error)
	mustEmbedUnimplementedChecklistStorageServer()
}

// UnimplementedChecklistStorageServer must be embedded to have forward compatible implementations.
type UnimplementedChecklistStorageServer struct {
}

func (UnimplementedChecklistStorageServer) CreateChecklist(context.Context, *CreateChecklistRequest) (*CreateChecklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChecklist not implemented")
}
func (UnimplementedChecklistStorageServer) DescribeChecklist(context.Context, *DescribeChecklistRequest) (*DescribeChecklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeChecklist not implemented")
}
func (UnimplementedChecklistStorageServer) ListChecklists(context.Context, *ListChecklistsRequest) (*ListChecklistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChecklists not implemented")
}
func (UnimplementedChecklistStorageServer) RemoveChecklist(context.Context, *RemoveChecklistRequest) (*RemoveChecklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChecklist not implemented")
}
func (UnimplementedChecklistStorageServer) mustEmbedUnimplementedChecklistStorageServer() {}

// UnsafeChecklistStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChecklistStorageServer will
// result in compilation errors.
type UnsafeChecklistStorageServer interface {
	mustEmbedUnimplementedChecklistStorageServer()
}

func RegisterChecklistStorageServer(s grpc.ServiceRegistrar, srv ChecklistStorageServer) {
	s.RegisterService(&ChecklistStorage_ServiceDesc, srv)
}

func _ChecklistStorage_CreateChecklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChecklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistStorageServer).CreateChecklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ChecklistStorage/CreateChecklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistStorageServer).CreateChecklist(ctx, req.(*CreateChecklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistStorage_DescribeChecklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeChecklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistStorageServer).DescribeChecklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ChecklistStorage/DescribeChecklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistStorageServer).DescribeChecklist(ctx, req.(*DescribeChecklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistStorage_ListChecklists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChecklistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistStorageServer).ListChecklists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ChecklistStorage/ListChecklists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistStorageServer).ListChecklists(ctx, req.(*ListChecklistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistStorage_RemoveChecklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChecklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistStorageServer).RemoveChecklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ChecklistStorage/RemoveChecklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistStorageServer).RemoveChecklist(ctx, req.(*RemoveChecklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChecklistStorage_ServiceDesc is the grpc.ServiceDesc for ChecklistStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChecklistStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ChecklistStorage",
	HandlerType: (*ChecklistStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChecklist",
			Handler:    _ChecklistStorage_CreateChecklist_Handler,
		},
		{
			MethodName: "DescribeChecklist",
			Handler:    _ChecklistStorage_DescribeChecklist_Handler,
		},
		{
			MethodName: "ListChecklists",
			Handler:    _ChecklistStorage_ListChecklists_Handler,
		},
		{
			MethodName: "RemoveChecklist",
			Handler:    _ChecklistStorage_RemoveChecklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
